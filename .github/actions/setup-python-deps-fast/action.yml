name: 'Setup Python Dependencies (Fast)'
description: 'Ultra-fast dependency setup using artifacts and aggressive caching'
inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.11'
  test-type:
    description: 'Type of test (unit, integration, performance, coverage)'
    required: true
  working-directory:
    description: 'Working directory for installation'
    required: false
    default: 'packages/eol-rag-context'
  use-artifacts:
    description: 'Try to use pre-built dependency artifacts'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    # Try to download pre-built dependency bundle first
    - name: Download dependency bundle
      if: inputs.use-artifacts == 'true'
      id: download-bundle
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: dep-cache-py${{ inputs.python-version }}
        path: /tmp/dep-bundle

    - name: Extract dependency bundle
      if: steps.download-bundle.outcome == 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "ðŸ“¦ Extracting pre-built dependency bundle..."
        tar xzf /tmp/dep-bundle/dep-cache-py${{ inputs.python-version }}.tar.gz

        # Link the virtual environment
        if [ -d ".dep-cache-${{ inputs.python-version }}" ]; then
          echo "âœ… Using pre-built dependencies"
          source .dep-cache-${{ inputs.python-version }}/bin/activate
          echo "VIRTUAL_ENV=$PWD/.dep-cache-${{ inputs.python-version }}" >> $GITHUB_ENV
          echo "$PWD/.dep-cache-${{ inputs.python-version }}/bin" >> $GITHUB_PATH
          echo "DEPS_FROM_ARTIFACT=true" >> $GITHUB_ENV
        fi

    # Fallback to regular installation if artifact not available
    - name: Cache pip packages and wheels
      if: steps.download-bundle.outcome != 'success'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
          ~/.local/share/uv
        key: ${{ runner.os }}-${{ inputs.python-version }}-pip-${{ inputs.test-type }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.python-version }}-pip-${{ inputs.test-type }}-
          ${{ runner.os }}-${{ inputs.python-version }}-pip-
          ${{ runner.os }}-pip-

    - name: Cache sentence transformer models
      if: (inputs.test-type == 'integration' || inputs.test-type == 'coverage') && steps.download-bundle.outcome != 'success'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/torch
          ~/.cache/huggingface
        key: ${{ runner.os }}-models-all-MiniLM-L6-v2
        restore-keys: |
          ${{ runner.os }}-models-

    - name: Install uv for fast dependency installation
      if: steps.download-bundle.outcome != 'success'
      shell: bash
      run: |
        if ! command -v uv &> /dev/null; then
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi

    - name: Install base dependencies
      if: steps.download-bundle.outcome != 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "ðŸ“¦ Installing dependencies from scratch..."
        # Base dependencies for all test types
        uv pip install --system --compile-bytecode \
          pytest pytest-asyncio pytest-timeout pytest-xdist \
          -r requirements.txt

    - name: Install unit test dependencies
      if: inputs.test-type == 'unit' && steps.download-bundle.outcome != 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        uv pip install --system --compile-bytecode \
          pytest-cov \
          sentence-transformers

    - name: Install integration test dependencies
      if: inputs.test-type == 'integration' && steps.download-bundle.outcome != 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        uv pip install --system --compile-bytecode \
          pytest-cov \
          redis redisvl \
          sentence-transformers \
          aioredis \
          watchdog gitignore-parser

    - name: Install performance test dependencies
      if: inputs.test-type == 'performance' && steps.download-bundle.outcome != 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        uv pip install --system --compile-bytecode \
          pytest-benchmark \
          sentence-transformers

    - name: Install coverage test dependencies
      if: inputs.test-type == 'coverage' && steps.download-bundle.outcome != 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        uv pip install --system --compile-bytecode \
          pytest-cov \
          redis redisvl \
          sentence-transformers \
          aioredis

    - name: Install Redis CLI for integration tests
      if: inputs.test-type == 'integration' || inputs.test-type == 'coverage'
      shell: bash
      run: |
        if ! command -v redis-cli &> /dev/null; then
          echo "ðŸ“¦ Installing Redis CLI..."
          sudo apt-get update && sudo apt-get install -y redis-tools
        fi

    - name: Pre-download models for integration tests
      if: (inputs.test-type == 'integration' || inputs.test-type == 'coverage') && steps.download-bundle.outcome != 'success'
      shell: bash
      run: |
        python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('all-MiniLM-L6-v2')" || true

    - name: Report installation method
      shell: bash
      run: |
        if [ "$DEPS_FROM_ARTIFACT" = "true" ]; then
          echo "âœ… Dependencies loaded from artifact (super fast!)"
        else
          echo "ðŸ“¦ Dependencies installed from cache/fresh"
        fi
