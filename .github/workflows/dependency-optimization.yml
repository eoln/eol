# DEPRECATED: Functionality merged into ci-cd.yml
# This workflow is disabled to prevent duplication
name: Dependency Optimization (DISABLED)

on:
  workflow_dispatch:
    # Only allow manual trigger for emergency use

jobs:
  build-wheel-cache:
    name: 🏗️ Build Wheel Cache
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Create wheel cache
      working-directory: packages/eol-rag-context
      run: |
        echo "🔄 Creating optimized wheel cache for Python ${{ matrix.python-version }}..."

        # Create wheel download directory
        mkdir -p .wheels-py${{ matrix.python-version }}

        # Check if lock file exists
        if [ ! -f "../../uv.lock" ]; then
          echo "❌ uv.lock not found! Please ensure the workspace has a lock file."
          exit 1
        fi

        # Create requirements from lock file
        if ! uv export --no-hashes > temp-requirements.txt; then
          echo "❌ Failed to export dependencies from uv.lock"
          exit 1
        fi

        echo "📋 Generated requirements from uv.lock:"
        head -10 temp-requirements.txt

        # Add test dependencies
        cat >> temp-requirements.txt << EOF
        pytest
        pytest-asyncio
        pytest-cov
        pytest-timeout
        pytest-xdist
        pytest-benchmark
        redis
        redisvl
        sentence-transformers
        aioredis
        watchdog
        gitignore-parser
        black
        isort
        flake8
        bandit
        safety
        EOF

        # Download all wheels using combined requirements
        echo "⬇️ Downloading wheels for $(wc -l < temp-requirements.txt) packages..."
        if ! uv pip download \
          --python ${{ matrix.python-version }} \
          --dest .wheels-py${{ matrix.python-version }} \
          -r temp-requirements.txt; then
          echo "❌ Failed to download wheels"
          exit 1
        fi

        # Validate wheel cache
        wheel_count=$(ls -1 .wheels-py${{ matrix.python-version }}/*.whl 2>/dev/null | wc -l)
        if [ "$wheel_count" -eq 0 ]; then
          echo "❌ No wheels downloaded! Check requirements file."
          exit 1
        fi

        # Create index of downloaded wheels
        ls -la .wheels-py${{ matrix.python-version }} > .wheels-py${{ matrix.python-version }}/index.txt
        echo "📊 Downloaded $wheel_count wheel files"

        # Create compressed archive
        tar czf wheels-py${{ matrix.python-version }}.tar.gz .wheels-py${{ matrix.python-version }}

        # Validate archive
        if [ ! -f "wheels-py${{ matrix.python-version }}.tar.gz" ]; then
          echo "❌ Failed to create wheel archive"
          exit 1
        fi

        archive_size=$(du -sh wheels-py${{ matrix.python-version }}.tar.gz | cut -f1)
        echo "✅ Wheel cache created successfully:"
        echo "  📦 Archive: wheels-py${{ matrix.python-version }}.tar.gz"
        echo "  📊 Size: $archive_size"
        echo "  🔢 Wheels: $wheel_count packages"

    - name: Upload wheel cache
      uses: actions/upload-artifact@v4
      with:
        name: wheels-py${{ matrix.python-version }}
        path: packages/eol-rag-context/wheels-py${{ matrix.python-version }}.tar.gz
        retention-days: 30  # Keep wheels for a month

    - name: Report completion
      run: |
        echo "🎉 Wheel cache optimization completed for Python ${{ matrix.python-version }}"
        echo "💡 Ultra-fast dependency setup is now available for CI/CD workflows"
        echo "📈 Expected performance improvement: 30s → 5-10s for dependency installation"
