name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**/*.py'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**/*.py'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git info

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Check docstring coverage
        run: |
          echo "## ðŸ“Š Docstring Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          pydocstyle src/eol/rag_context --count || true
          echo '```' >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Validate documentation links
        run: |
          pip install linkchecker
          mkdocs build --strict
          linkchecker site/ --no-warnings --ignore-url=^mailto: --ignore-url=^https://github.com.*/blob/ || true
        continue-on-error: true

      - name: Build documentation
        run: |
          mkdocs build --clean --verbose
          
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: site/
          retention-days: 30

      - name: Configure Git for mike
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy versioned documentation
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Get version from package or use 'dev' for non-releases
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])" 2>/dev/null || echo "dev")
          
          # Deploy with mike
          if [ "$VERSION" == "dev" ]; then
            mike deploy --push --update-aliases dev latest
          else
            mike deploy --push --update-aliases "$VERSION" latest
            mike set-default --push latest
          fi

      - name: Setup Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  pr-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: site/
      
      - name: Comment PR with preview info
        uses: actions/github-script@v7
        with:
          script: |
            const artifactUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“š **Documentation Preview Ready!**\n\nThe documentation has been built successfully. You can download the preview artifacts [here](${artifactUrl}).\n\n*Note: Full preview deployment will be available once merged to main.*`
            })