name: Dependency Management

on:
  push:
    paths:
      - '**/pyproject.toml'
      - '**/requirements*.txt'
      - 'requirements/**'
      - 'uv.toml'
      - '.github/workflows/dependencies.yml'
  pull_request:
    paths:
      - '**/pyproject.toml'
      - '**/requirements*.txt'
      - 'requirements/**'
      - 'uv.toml'
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            requirements/*.txt
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Create virtual environment
        run: uv venv --python ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv sync --all-packages
          uv pip install -r requirements/dev.txt
      
      - name: Check dependency conflicts
        run: |
          source .venv/bin/activate
          uv pip check
      
      - name: Generate dependency tree
        run: |
          source .venv/bin/activate
          pip install pipdeptree
          pipdeptree --warn fail
      
      - name: Check for circular dependencies
        run: |
          source .venv/bin/activate
          pipdeptree --warn fail | grep -i circular || echo "No circular dependencies found"
      
      - name: Upload dependency report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report-${{ matrix.python-version }}
          path: |
            requirements/*.lock
            **/uv.lock

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install UV
        uses: astral-sh/setup-uv@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --all-packages
          uv pip install pip-audit safety bandit
      
      - name: Run pip-audit
        run: |
          source .venv/bin/activate
          pip-audit --desc --format json --output pip-audit-report.json || true
          pip-audit --desc
        continue-on-error: true
      
      - name: Run safety check
        run: |
          source .venv/bin/activate
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true
      
      - name: Run bandit security scan
        run: |
          source .venv/bin/activate
          bandit -r packages/*/src -f json -o bandit-report.json || true
          bandit -r packages/*/src
        continue-on-error: true
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            pip-audit-report.json
            safety-report.json
            bandit-report.json
      
      - name: Create security summary
        if: always()
        run: |
          echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### pip-audit Results" >> $GITHUB_STEP_SUMMARY
          if [ -f pip-audit-report.json ]; then
            vulns=$(python -c "import json; data = json.load(open('pip-audit-report.json')); print(len(data.get('vulnerabilities', [])))")
            echo "Found $vulns vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Safety Results" >> $GITHUB_STEP_SUMMARY
          if [ -f safety-report.json ]; then
            vulns=$(python -c "import json; data = json.load(open('safety-report.json')); print(len(data.get('vulnerabilities', [])))" 2>/dev/null || echo "0")
            echo "Found $vulns vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Bandit Results" >> $GITHUB_STEP_SUMMARY
          if [ -f bandit-report.json ]; then
            issues=$(python -c "import json; data = json.load(open('bandit-report.json')); print(len(data.get('results', [])))")
            echo "Found $issues potential security issues" >> $GITHUB_STEP_SUMMARY
          fi

  update-constraints:
    name: Update Constraints
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install UV
        uses: astral-sh/setup-uv@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Update dependencies
        run: |
          uv venv
          source .venv/bin/activate
          ./scripts/update-deps.sh patch false
      
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet requirements/constraints.txt; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependency constraints'
          title: 'chore: update dependency constraints'
          body: |
            ## ðŸ”„ Automated Dependency Update
            
            This PR updates the dependency constraints to their latest patch versions.
            
            ### Changes
            - Updated `requirements/constraints.txt` with latest versions
            - All security checks have been run
            - Tests will run automatically
            
            Please review the changes and merge if all checks pass.
          branch: deps/update-constraints
          delete-branch: true

  validate-workspace:
    name: Validate UV Workspace
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install UV
        uses: astral-sh/setup-uv@v4
      
      - name: Validate workspace configuration
        run: |
          uv --version
          
          # Check workspace structure
          echo "Checking workspace structure..."
          test -f pyproject.toml || (echo "Root pyproject.toml missing" && exit 1)
          test -f uv.toml || (echo "uv.toml missing" && exit 1)
          
          # Validate each package
          for package in packages/*; do
            if [ -d "$package" ]; then
              echo "Validating $package..."
              test -f "$package/pyproject.toml" || (echo "$package/pyproject.toml missing" && exit 1)
            fi
          done
          
          echo "âœ… Workspace structure valid"
      
      - name: Test workspace sync
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --all-packages --dry-run
          echo "âœ… Workspace sync successful"