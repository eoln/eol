name: Test RAG Context

on:
  push:
    branches: [ main, feat/rag-context ]
    paths:
      - 'packages/eol-rag-context/**'
      - '.github/workflows/test-rag-context.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/eol-rag-context/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis/redis-stack:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('packages/eol-rag-context/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: packages/eol-rag-context
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install --system pytest pytest-asyncio pytest-cov pytest-timeout
        uv pip install --system redis aioredis numpy pydantic pydantic-settings aiofiles
        uv pip install --system sentence-transformers beautifulsoup4 markdown pyyaml
        uv pip install --system networkx watchdog gitignore-parser
        # Mock dependencies that are not needed for tests
        pip install unittest-mock
    
    - name: Run Unit Tests
      working-directory: packages/eol-rag-context
      env:
        PYTHONPATH: ${{ github.workspace }}/packages/eol-rag-context/src
      run: |
        python -m pytest tests/test_config.py tests/test_embeddings.py tests/test_force_coverage.py \
          --cov=eol.rag_context \
          --cov-report=term \
          --cov-report=xml \
          --tb=short \
          -v
    
    - name: Run Integration Tests
      working-directory: packages/eol-rag-context
      env:
        PYTHONPATH: ${{ github.workspace }}/packages/eol-rag-context/src
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        python -m pytest tests/integration/ \
          --cov=eol.rag_context \
          --cov-append \
          --cov-report=term \
          --cov-report=xml \
          --tb=short \
          -v \
          -m integration
    
    - name: Generate Coverage Report
      working-directory: packages/eol-rag-context
      run: |
        python -m pytest tests/ \
          --cov=eol.rag_context \
          --cov-report=term \
          --cov-report=html:coverage-report \
          --quiet
        
        # Display coverage summary
        echo "::group::Coverage Summary"
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.get('line-rate', 0)) * 100
        print(f'Total Coverage: {coverage:.1f}%')
        if coverage >= 80:
            print('✅ Coverage target (80%) achieved!')
        else:
            print(f'⚠️ Coverage ({coverage:.1f}%) is below target (80%)')
        "
        echo "::endgroup::"
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          packages/eol-rag-context/coverage.xml
          packages/eol-rag-context/coverage-report/
    
    - name: Comment Coverage on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 60
        ANNOTATE_MISSING_LINES: true
        ANNOTATION_TYPE: warning
        
    - name: Check Coverage Threshold
      working-directory: packages/eol-rag-context
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        import sys
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.get('line-rate', 0)) * 100
        print(f'Final Coverage: {coverage:.1f}%')
        if coverage < 80:
            print('❌ Coverage is below 80% threshold')
            sys.exit(1)
        else:
            print('✅ Coverage meets 80% threshold')
        "