name: EOL RAG Context - Optimized Quality Gate

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/eol-rag-context/**'
      - '.github/workflows/eol-rag-context-quality-gate-optimized.yml'
  push:
    branches: [ feat/test-coverage-80 ]
    paths:
      - 'packages/eol-rag-context/**'

env:
  PACKAGE_PATH: packages/eol-rag-context
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD: 80

jobs:
  # =========================================
  # Build dependency cache once
  # =========================================
  build-deps:
    name: 📦 Build Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-key }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Generate cache key
      id: cache
      run: |
        echo "cache-key=deps-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}" >> $GITHUB_OUTPUT

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
          ~/.local/share/uv
          ~/.cache/huggingface
          ~/.cache/torch
          ${{ env.PACKAGE_PATH }}/.venv
        key: ${{ steps.cache.outputs.cache-key }}
        restore-keys: |
          deps-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

    - name: Install dependencies if not cached
      if: steps.cache-deps.outputs.cache-hit != 'true'
      working-directory: ${{ env.PACKAGE_PATH }}
      run: |
        # Install uv
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="$HOME/.local/bin:$PATH"

        # Create virtual environment
        uv venv .venv

        # Install ALL dependencies at once
        uv pip install --python .venv/bin/python \
          pytest pytest-asyncio pytest-cov pytest-timeout pytest-xdist pytest-benchmark \
          redis redisvl sentence-transformers aioredis \
          watchdog gitignore-parser black isort flake8 mypy bandit safety \
          -r requirements.txt -r requirements-dev.txt

        # Pre-download models
        .venv/bin/python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('all-MiniLM-L6-v2')"

        echo "✅ Dependencies cached successfully"

    - name: Create dependency artifact
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        tar czf deps.tar.gz \
          ~/.cache/pip \
          ~/.cache/uv \
          ~/.local/share/uv \
          ~/.cache/huggingface \
          ~/.cache/torch \
          ${{ env.PACKAGE_PATH }}/.venv

    - name: Upload dependency artifact
      if: steps.cache-deps.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: deps-py${{ env.PYTHON_VERSION }}
        path: deps.tar.gz
        retention-days: 1
        compression-level: 0  # Already compressed

  # =========================================
  # Code Quality (uses cached deps)
  # =========================================
  code-quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    needs: build-deps

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore dependency cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
          ~/.local/share/uv
          ~/.cache/huggingface
          ~/.cache/torch
          ${{ env.PACKAGE_PATH }}/.venv
        key: ${{ needs.build-deps.outputs.cache-key }}

    - name: Run quality checks
      working-directory: ${{ env.PACKAGE_PATH }}
      run: |
        source .venv/bin/activate

        echo "🔍 Checking code formatting with Black..."
        black --check --diff src/ tests/

        echo "🔍 Checking import sorting with isort..."
        isort --check-only --diff src/ tests/

        echo "🔍 Running flake8 linting..."
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

        echo "🔍 Running security scan with bandit..."
        bandit -r src/ -ll

  # =========================================
  # Unit Tests (parallel, uses cached deps)
  # =========================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: build-deps
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Restore dependency cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
          ~/.local/share/uv
          ~/.cache/huggingface
          ~/.cache/torch
          ${{ env.PACKAGE_PATH }}/.venv
        key: deps-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          deps-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install dependencies if needed
      working-directory: ${{ env.PACKAGE_PATH }}
      run: |
        if [ ! -d ".venv" ]; then
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.local/bin:$PATH"
          uv venv .venv
          uv pip install --python .venv/bin/python \
            pytest pytest-asyncio pytest-cov pytest-timeout pytest-xdist \
            sentence-transformers -r requirements.txt
        fi

    - name: Run unit tests
      working-directory: ${{ env.PACKAGE_PATH }}
      env:
        PYTHONPATH: ${{ github.workspace }}/${{ env.PACKAGE_PATH }}/src
      run: |
        source .venv/bin/activate

        python -m pytest tests/unit/ \
          -v --tb=short \
          -n auto --maxprocesses=4 \
          --cov=eol.rag_context \
          --cov-report=xml:unit-coverage-${{ matrix.python-version }}.xml \
          --junit-xml=unit-test-results-${{ matrix.python-version }}.xml \
          --timeout=300

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          ${{ env.PACKAGE_PATH }}/unit-test-results-${{ matrix.python-version }}.xml
          ${{ env.PACKAGE_PATH }}/unit-coverage-${{ matrix.python-version }}.xml

  # =========================================
  # Integration Tests (uses cached deps)
  # =========================================
  integration-tests:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: [build-deps, unit-tests]

    services:
      redis:
        image: redis/redis-stack:latest
        ports:
          - 6379:6379
          - 8001:8001
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore dependency cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
          ~/.local/share/uv
          ~/.cache/huggingface
          ~/.cache/torch
          ${{ env.PACKAGE_PATH }}/.venv
        key: ${{ needs.build-deps.outputs.cache-key }}

    - name: Install Redis CLI
      run: |
        sudo apt-get update && sudo apt-get install -y redis-tools

    - name: Verify Redis
      run: |
        timeout 10s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        redis-cli -h localhost -p 6379 MODULE LIST | grep search

    - name: Run integration tests
      working-directory: ${{ env.PACKAGE_PATH }}
      env:
        PYTHONPATH: ${{ github.workspace }}/${{ env.PACKAGE_PATH }}/src
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        source .venv/bin/activate
        redis-cli -h localhost -p 6379 FLUSHALL

        python -m pytest tests/integration/ \
          -v --tb=short \
          -n auto --maxprocesses=4 \
          --cov=eol.rag_context --cov-append \
          --cov-report=xml:integration-coverage.xml \
          --junit-xml=integration-test-results.xml \
          --timeout=300 \
          -m integration

    - name: Generate test summary
      if: always()
      working-directory: ${{ env.PACKAGE_PATH }}
      run: |
        python ${{ github.workspace }}/.github/scripts/test_summary.py \
          integration-test-results.xml \
          "Integration Tests" || true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          ${{ env.PACKAGE_PATH }}/integration-test-results.xml
          ${{ env.PACKAGE_PATH }}/integration-coverage.xml

  # =========================================
  # Coverage Gate (uses all test results)
  # =========================================
  coverage-gate:
    name: 📈 Coverage Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: '*-test-results-*'
        path: test-results/

    - name: Merge coverage reports
      working-directory: test-results
      run: |
        pip install coverage

        # Find all coverage files
        find . -name '*coverage*.xml' -exec cp {} . \;

        # Merge coverage
        coverage combine || true
        coverage xml -o final-coverage.xml
        coverage report

    - name: Check coverage threshold
      run: |
        python ${{ github.workspace }}/.github/scripts/coverage_check.py \
          test-results/final-coverage.xml \
          ${{ env.COVERAGE_THRESHOLD }} \
          --badge test-results/coverage-badge.json

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: final-coverage
        path: |
          test-results/final-coverage.xml
          test-results/coverage-badge.json
