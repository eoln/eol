name: EOL RAG Context - Optimized Integration Tests

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/eol-rag-context/**'
  push:
    branches: [ main, develop, feat/test-coverage-80 ]
    paths:
      - 'packages/eol-rag-context/**'

env:
  PACKAGE_PATH: packages/eol-rag-context
  PYTHON_VERSION: '3.11'
  REDIS_HOST: localhost
  REDIS_PORT: 6379

jobs:
  integration-tests-optimized:
    name: ðŸš€ Fast Integration Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis/redis-stack:latest
        ports:
          - 6379:6379
          - 8001:8001
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
          --health-start-period 5s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python and Dependencies
      uses: ./.github/actions/setup-python-deps
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        test-type: integration
        working-directory: ${{ env.PACKAGE_PATH }}

    - name: Verify Redis is ready
      run: |
        timeout 10s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        redis-cli -h localhost -p 6379 MODULE LIST | grep search || exit 1

    - name: Run integration tests (parallel)
      working-directory: ${{ env.PACKAGE_PATH }}
      env:
        PYTHONPATH: ${{ github.workspace }}/${{ env.PACKAGE_PATH }}/src
      run: |
        # Clear Redis before tests
        redis-cli -h localhost -p 6379 FLUSHALL

        # Run tests in parallel with xdist
        python -m pytest tests/integration/ \
          -v \
          --tb=short \
          -n auto \
          --maxprocesses=4 \
          --cov=eol.rag_context \
          --cov-report=term \
          --cov-report=xml:integration-coverage.xml \
          --junit-xml=integration-test-results.xml \
          --timeout=300 \
          -m integration || true

    - name: Generate test summary
      if: always()
      working-directory: ${{ env.PACKAGE_PATH }}
      run: |
        python ${{ github.workspace }}/.github/scripts/test_summary.py \
          integration-test-results.xml \
          "Integration Tests" || true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          ${{ env.PACKAGE_PATH }}/integration-test-results.xml
          ${{ env.PACKAGE_PATH }}/integration-coverage.xml
