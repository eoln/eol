[project]
name = "eol"
version = "0.1.0"
description = "AI Framework for building modern LLM applications with two-phase development"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "GPL-3.0" }
authors = [
    { name = "eoln", email = "eoln@users.noreply.github.com" }
]
keywords = [
    "ai",
    "llm",
    "mcp",
    "rag",
    "redis",
    "vector-database",
    "framework"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

dependencies = [
    # Core dependencies
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pyyaml>=6.0",
    "markdown>=3.5",
    "pydantic>=2.0",
    
    # Redis and vector operations
    "redis[vector]>=5.0.0",
    "redisvl>=0.1.0",
    
    # LLM and AI
    "anthropic>=0.20.0",
    "openai>=1.0.0",
    "litellm>=1.0.0",
    "langchain>=0.1.0",
    "tiktoken>=0.5.0",
    
    # MCP support
    "fastmcp>=0.1.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    
    # Async support
    "asyncio>=3.4.3",
    "aiofiles>=23.0.0",
    
    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    
    # Web framework (for MCP server mode)
    "fastapi>=0.100.0",
    "uvicorn>=0.24.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "watchdog>=3.0.0",
    "networkx>=3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
]

docker = [
    "docker>=6.1.0",
    "docker-compose>=1.29.0",
]

stripe = [
    "stripe>=7.0.0",
]

monitoring = [
    "prometheus-client>=0.18.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "structlog>=23.0.0",
]

[project.urls]
Homepage = "https://eol.dev"
Documentation = "https://docs.eol.dev"
Repository = "https://github.com/eoln/eol"
Issues = "https://github.com/eoln/eol/issues"

[project.scripts]
eol = "eol.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

[tool.uv.workspace]
members = [
    "packages/eol-core",
    "packages/eol-proto",
    "packages/eol-impl",
    "packages/eol-redis",
    "packages/eol-mcp",
    "packages/eol-cli",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "--asyncio-mode=auto",
    "--cov=eol",
    "--cov-report=html",
    "--cov-report=term-missing",
    "-v",
    "--tb=short",
]

[tool.coverage.run]
source = ["eol"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["eol"]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'